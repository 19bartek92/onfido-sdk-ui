@custom-media --large (min-width: 480px);
@custom-media --small-viewport (max-width: 479px);
@custom-media --smaller-viewport (max-width: 359px);

/**
 * We want our units to be based on `em`, so that our SDK can accommodate for
 * the user changing their browser font size.
 * At the same time, `px` is a unit often used in templates etc. from Design.
 * To accommodate for both of these cases, we make our @unit be 1/16 of an `em`.
 * This results in each @unit into being the same as 1px (when the parent
 * font-size is 16px, as it is by default).
 *
 * So each "unit" isn't a pixel, but it is when the parent font size is 16px,
 * and it's proportionate to the difference otherwise.
 */
@unit: 1/16em;
@font-size-base: 16*@unit;

/*
 * We also need different units for when trying to do `px` "equivalents" when
 * our parent has a different font size.
 */
@unit-large: 1/20em;
@font-size-large: 20*@unit;

@unit-small: 1/14em;
@font-size-small: 14*@unit;

@unit-x-small: 1/11em;
@font-size-x-small: 11*@unit;

/*
 * We also have a special unit for the react-phone-number-input library, so
 * we can keep its units in line with whatever units we decide to pick
 */
@unit-rrui: 1em;

@large-text-margin: 40*@unit;
@small-text-margin: 24*@unit;

.absolute-center {
  margin: auto;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
}

.width-parent-relative(@base-width,@parent-width) {
  width: 100%*(@base-width/@parent-width)
}
